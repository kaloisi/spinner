{"version":3,"sources":["Spinner.js","index.js"],"names":["COLORS","Spinner","props","state","spinCount","view","h","w","center","y","x","data","error","info","console","log","height","window","innerHeight","width","innerWidth","this","setState","setSize","fetch","method","then","res","json","e","catch","deg","radius","rad","Math","PI","cos","sin","startDeg","endDeg","CENTER","i","min","p","cacluatePointOnCircle","outOf","length","slice","ringNumber","ringCount","sliceNumber","numberOfSlices","pieWidth","sliceWidth","key","pieSize","halfSlice","transform","d","createLinesAlongCurve","fill","getColor","stroke","strokeWidth","fontSize","spinner","isBackwards","randomRotation","round","random","centerString","sliceSize","snap","style","animation","map","renderSlice","renderSpinner","onMouseUp","refresh","renderSpinners","React","Component","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.7cc46df9.chunk.js","sourcesContent":["import React from 'react';\nconst COLORS = [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\",\"#b15928\"];\n\nclass Spinner extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spinCount: 1,\n            view: {\n                h: 0,\n                w: 0,\n            }, \n            center: {\n                y: 0,\n                x: 0,\n            },\n            data: []\n        }\n    }\n\n    componentDidCatch(error, info) {\n        console.log(\"Error\", error, info);\n    }\n\n    setSize() {\n        const height = window.innerHeight;\n        const width = window.innerWidth;\n        this.setState({ \n            view: {\n                h: height,\n                w: width\n            },\n            center: {\n                y: height/2,\n                x: 25\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.setSize();\n        \n        const url = 'spinners/key_n_positions.json';\n        fetch(url, {method: 'GET'}).\n        then(res => res.json()).\n        then(json => {\n            try {\n                console.log(\"Loaded\", json);\n                this.setState({\n                    data: json\n                });\n            } catch (e) {\n                console.log(\"Error\", e);\n            }\n        }).catch(e => {\n            console.log(\"Error\", e);\n        })\n    }\n\n    cacluatePointOnCircle(deg, radius) {\n        // ùë•=ùëü sinùúÉ, ùë¶ = ùëü cosùúÉ.\n        const piFactor = (Math.PI / 180);\n        const rad = deg * piFactor;\n        return { \n            x: Math.cos(rad) * radius, \n            y: Math.sin(rad) * radius\n        };\n      }\n  \n      createLinesAlongCurve(startDeg, endDeg, radius) {\n          const CENTER = this.state.center;\n          const deltaDeg = 5;\n          let data = \"M \" + CENTER.x + \" \" + CENTER.y + \" \\n\";\n          for(let i = startDeg; i < (endDeg + deltaDeg); i = i + deltaDeg) {\n              const deg = Math.min(i, endDeg);\n              const p = this.cacluatePointOnCircle(deg, radius);\n              let x = CENTER.x + p.x;\n              let y = CENTER.y + p.y;\n              data += \" L \" + x + \" \" + y + \" \\n\";\n          }\n          return data + \" z\";\n    }\n \n    getColor(i, outOf) {\n        if (COLORS.length == (outOf - 1)) {\n            return COLORS[i % (COLORS.length - 1)];\n        } else {\n            return COLORS[i % COLORS.length];\n        }\n    }\n\n    renderSlice(slice, ringNumber, ringCount, sliceNumber, numberOfSlices) {\n        const pieWidth = this.state.view.w - this.state.center.x * 2;\n        const sliceWidth = pieWidth - (pieWidth / ringCount) * ringNumber;\n        const key = \"r\" + ringNumber + \"s\" + sliceNumber;\n        const pieSize = 360 / (numberOfSlices);\n        const halfSlice = pieSize / 2;\n        return (\n            <g key={\"g\" + key} transform={\"rotate(\" + (pieSize * sliceNumber) + \" \" + this.state.center.x  + \" \" + this.state.center.y + \")\"}>\n                <path key={\"p\" + key} d={this.createLinesAlongCurve(-halfSlice, halfSlice, sliceWidth)}\n                    fill={this.getColor(sliceNumber, numberOfSlices)} stroke=\"#000\" strokeWidth={1}/>\n                <text key={\"t\" + key} x={sliceWidth} y={this.state.center.y} text-anchor=\"end\" fontSize=\"1.15em\">{slice}</text>\n            </g>\n        );\n    }\n\n    renderSpinner(spinner, ringNumber, ringCount) {\n        let isBackwards = ringNumber % 2 == 0 ? 1 : -1;\n        let randomRotation =  Math.round(720 + 360 * Math.random());\n        let centerString = \" \" + this.state.center.x + \" \" + this.state.center.y;\n        let sliceSize = Math.round(360 / spinner.length);\n        let snap = sliceSize - (randomRotation % sliceSize);\n        \n        let sequence = `0 ${centerString};`;\n        sequence += `${randomRotation/2 * isBackwards} ${centerString};`;\n        sequence += `${randomRotation * isBackwards} ${centerString};`;\n        sequence += `${(randomRotation + snap) * isBackwards} ${centerString};`;\n\n        //console.log(`slice = ${sliceSize} des=${randomRotation} snap=${snap}`);\n\n        const animations = {\n            animation: \"rotation 8s infinite linear\",\n            // attributeName: \"rotate\",\n            // attributeType: \"transform\",\n            // keyTimes: \"0; 0.4; 0.8; 1\",\n            // animationDuration: \"4000ms\",\n            // values: sequence,\n            // repeatCount: 1\n        };\n\n        return (\n            <g key={\"ring\" + ringNumber + \"_\" + this.state.spinCount} style={animations} transform={\"rotate(\" +(randomRotation+snap)*isBackwards + \" \" + centerString +\")\"}>\n                {\n                spinner.map((slice,sliceNumber) => {\n                    return this.renderSlice(slice, ringNumber, ringCount, sliceNumber, spinner.length);\n                })}\n            </g>\n        );\n    }\n\n    renderSpinners() {\n        return this.state.data.map((spinner, i) => {\n            return this.renderSpinner(spinner, i, this.state.data.length);\n        });\n    }\n\n    refresh() {\n        this.setSize();\n        let spinCount = this.state.spinCount + 1;\n        this.setState({\n            spinCount: spinCount\n        });\n        \n        //console.log(spinCount);\n    }\n\n    render() {\n        return (\n            <div>\n                <svg key={\"s\" + this.state.spinCount} width={this.state.view.w} height={this.state.view.h} onMouseUp={(e) => this.refresh()}>\n                    {this.renderSpinners()}\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Spinner from './Spinner';\n\nReactDOM.render(\n  <React.Fragment>\n    <Spinner />\n  </React.Fragment>,\n  document.getElementById('root')\n);"],"sourceRoot":""}